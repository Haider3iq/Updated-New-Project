type SavedMessages @model @auth(rules: [{allow: public}]) {
  id: ID!
  content: String
  senderName: String
  senderID: ID
  userID: ID @index(name: "byUser")
}

type Reaction @model @auth(rules: [{allow: public}]) {
  id: ID!
  userID: ID
  content: String
  messageID: ID @index(name: "byMessage")
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

type Message @model @auth(rules: [{allow: public}]) {
  id: ID!
  content: String
  userID: ID @index(name: "byUser")
  chatroomID: ID @index(name: "byChatRoom")
  image: String
  audio: String
  status: MessageStatus
  replyToMessageID: ID
  Reactions: [Reaction] @hasMany(indexName: "byMessage", fields: ["id"])
  isSelected: Boolean
}

type ChatRoom @model @auth(rules: [{allow: public}]) {
  id: ID!
  newMessages: Int
  LastMessage: Message @hasOne
  Messages: [Message] @hasMany(indexName: "byChatRoom", fields: ["id"])
  ChatRoomUser: [User] @manyToMany(relationName: "ChatRoomUser")
  Admin: User @hasOne
  name: String
  imageUri: String
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  imageUri: String
  status: String
  lastOnlineAt: AWSTimestamp
  typingStatus: String
  followers: [ID]
  following: [ID]
  blockedUsers: [ID]
  Messages: [Message] @hasMany(indexName: "byUser", fields: ["id"])
  chatrooms: [ChatRoom] @manyToMany(relationName: "ChatRoomUser")
  color: String
  SavedMessages: [SavedMessages] @hasMany(indexName: "byUser", fields: ["id"])
}
 
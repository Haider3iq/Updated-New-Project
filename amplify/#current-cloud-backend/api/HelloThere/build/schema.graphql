
type SavedMessages @aws_iam @aws_api_key {
  id: ID!
  content: String
  senderName: String
  senderID: ID
  userID: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Reaction @aws_iam @aws_api_key {
  id: ID!
  userID: ID
  content: String
  messageID: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

type Message @aws_iam @aws_api_key {
  id: ID!
  content: String
  userID: ID
  chatroomID: ID
  image: String
  audio: String
  status: MessageStatus
  replyToMessageID: ID
  Reactions(filter: ModelReactionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelReactionConnection
  isSelected: Boolean
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type ChatRoom @aws_iam @aws_api_key {
  id: ID!
  newMessages: Int
  LastMessage: Message
  Messages(filter: ModelMessageFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMessageConnection
  ChatRoomUser(filter: ModelChatRoomUserFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelChatRoomUserConnection
  Admin: User
  name: String
  imageUri: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  chatRoomLastMessageId: ID
  chatRoomAdminId: ID
}

type User @aws_iam @aws_api_key {
  id: ID!
  name: String!
  imageUri: String
  status: String
  lastOnlineAt: AWSTimestamp
  typingStatus: String
  followers: [ID]
  following: [ID]
  blockedUsers: [ID]
  Messages(filter: ModelMessageFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMessageConnection
  chatrooms(filter: ModelChatRoomUserFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelChatRoomUserConnection
  color: String
  SavedMessages(filter: ModelSavedMessagesFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelSavedMessagesConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type ChatRoomUser @aws_iam @aws_api_key {
  id: ID!
  chatRoomID: ID!
  userID: ID!
  chatRoom: ChatRoom!
  user: User!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelSavedMessagesConnection @aws_api_key @aws_iam {
  items: [SavedMessages]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelSavedMessagesFilterInput {
  id: ModelIDInput
  content: ModelStringInput
  senderName: ModelStringInput
  senderID: ModelIDInput
  userID: ModelIDInput
  and: [ModelSavedMessagesFilterInput]
  or: [ModelSavedMessagesFilterInput]
  not: ModelSavedMessagesFilterInput
}

type Query {
  getSavedMessages(id: ID!): SavedMessages @aws_api_key @aws_iam
  listSavedMessages(filter: ModelSavedMessagesFilterInput, limit: Int, nextToken: String): ModelSavedMessagesConnection @aws_api_key @aws_iam
  syncSavedMessages(filter: ModelSavedMessagesFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelSavedMessagesConnection @aws_api_key @aws_iam
  getReaction(id: ID!): Reaction @aws_api_key @aws_iam
  listReactions(filter: ModelReactionFilterInput, limit: Int, nextToken: String): ModelReactionConnection @aws_api_key @aws_iam
  syncReactions(filter: ModelReactionFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelReactionConnection @aws_api_key @aws_iam
  getMessage(id: ID!): Message @aws_api_key @aws_iam
  listMessages(filter: ModelMessageFilterInput, limit: Int, nextToken: String): ModelMessageConnection @aws_api_key @aws_iam
  syncMessages(filter: ModelMessageFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelMessageConnection @aws_api_key @aws_iam
  getChatRoom(id: ID!): ChatRoom @aws_api_key @aws_iam
  listChatRooms(filter: ModelChatRoomFilterInput, limit: Int, nextToken: String): ModelChatRoomConnection @aws_api_key @aws_iam
  syncChatRooms(filter: ModelChatRoomFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelChatRoomConnection @aws_api_key @aws_iam
  getUser(id: ID!): User @aws_api_key @aws_iam
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_api_key @aws_iam
  syncUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserConnection @aws_api_key @aws_iam
  getChatRoomUser(id: ID!): ChatRoomUser @aws_api_key @aws_iam
  listChatRoomUsers(filter: ModelChatRoomUserFilterInput, limit: Int, nextToken: String): ModelChatRoomUserConnection @aws_api_key @aws_iam
  syncChatRoomUsers(filter: ModelChatRoomUserFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelChatRoomUserConnection @aws_api_key @aws_iam
}

input ModelSavedMessagesConditionInput {
  content: ModelStringInput
  senderName: ModelStringInput
  senderID: ModelIDInput
  userID: ModelIDInput
  and: [ModelSavedMessagesConditionInput]
  or: [ModelSavedMessagesConditionInput]
  not: ModelSavedMessagesConditionInput
}

input CreateSavedMessagesInput {
  id: ID
  content: String
  senderName: String
  senderID: ID
  userID: ID
  _version: Int
}

input UpdateSavedMessagesInput {
  id: ID!
  content: String
  senderName: String
  senderID: ID
  userID: ID
  _version: Int
}

input DeleteSavedMessagesInput {
  id: ID!
  _version: Int
}

type Mutation {
  createSavedMessages(input: CreateSavedMessagesInput!, condition: ModelSavedMessagesConditionInput): SavedMessages @aws_api_key @aws_iam
  updateSavedMessages(input: UpdateSavedMessagesInput!, condition: ModelSavedMessagesConditionInput): SavedMessages @aws_api_key @aws_iam
  deleteSavedMessages(input: DeleteSavedMessagesInput!, condition: ModelSavedMessagesConditionInput): SavedMessages @aws_api_key @aws_iam
  createReaction(input: CreateReactionInput!, condition: ModelReactionConditionInput): Reaction @aws_api_key @aws_iam
  updateReaction(input: UpdateReactionInput!, condition: ModelReactionConditionInput): Reaction @aws_api_key @aws_iam
  deleteReaction(input: DeleteReactionInput!, condition: ModelReactionConditionInput): Reaction @aws_api_key @aws_iam
  createMessage(input: CreateMessageInput!, condition: ModelMessageConditionInput): Message @aws_api_key @aws_iam
  updateMessage(input: UpdateMessageInput!, condition: ModelMessageConditionInput): Message @aws_api_key @aws_iam
  deleteMessage(input: DeleteMessageInput!, condition: ModelMessageConditionInput): Message @aws_api_key @aws_iam
  createChatRoom(input: CreateChatRoomInput!, condition: ModelChatRoomConditionInput): ChatRoom @aws_api_key @aws_iam
  updateChatRoom(input: UpdateChatRoomInput!, condition: ModelChatRoomConditionInput): ChatRoom @aws_api_key @aws_iam
  deleteChatRoom(input: DeleteChatRoomInput!, condition: ModelChatRoomConditionInput): ChatRoom @aws_api_key @aws_iam
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  createChatRoomUser(input: CreateChatRoomUserInput!, condition: ModelChatRoomUserConditionInput): ChatRoomUser @aws_api_key @aws_iam
  updateChatRoomUser(input: UpdateChatRoomUserInput!, condition: ModelChatRoomUserConditionInput): ChatRoomUser @aws_api_key @aws_iam
  deleteChatRoomUser(input: DeleteChatRoomUserInput!, condition: ModelChatRoomUserConditionInput): ChatRoomUser @aws_api_key @aws_iam
}

type Subscription {
  onCreateSavedMessages: SavedMessages @aws_subscribe(mutations: ["createSavedMessages"]) @aws_api_key @aws_iam
  onUpdateSavedMessages: SavedMessages @aws_subscribe(mutations: ["updateSavedMessages"]) @aws_api_key @aws_iam
  onDeleteSavedMessages: SavedMessages @aws_subscribe(mutations: ["deleteSavedMessages"]) @aws_api_key @aws_iam
  onCreateReaction: Reaction @aws_subscribe(mutations: ["createReaction"]) @aws_api_key @aws_iam
  onUpdateReaction: Reaction @aws_subscribe(mutations: ["updateReaction"]) @aws_api_key @aws_iam
  onDeleteReaction: Reaction @aws_subscribe(mutations: ["deleteReaction"]) @aws_api_key @aws_iam
  onCreateMessage: Message @aws_subscribe(mutations: ["createMessage"]) @aws_api_key @aws_iam
  onUpdateMessage: Message @aws_subscribe(mutations: ["updateMessage"]) @aws_api_key @aws_iam
  onDeleteMessage: Message @aws_subscribe(mutations: ["deleteMessage"]) @aws_api_key @aws_iam
  onCreateChatRoom: ChatRoom @aws_subscribe(mutations: ["createChatRoom"]) @aws_api_key @aws_iam
  onUpdateChatRoom: ChatRoom @aws_subscribe(mutations: ["updateChatRoom"]) @aws_api_key @aws_iam
  onDeleteChatRoom: ChatRoom @aws_subscribe(mutations: ["deleteChatRoom"]) @aws_api_key @aws_iam
  onCreateUser: User @aws_subscribe(mutations: ["createUser"]) @aws_api_key @aws_iam
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"]) @aws_api_key @aws_iam
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"]) @aws_api_key @aws_iam
  onCreateChatRoomUser: ChatRoomUser @aws_subscribe(mutations: ["createChatRoomUser"]) @aws_api_key @aws_iam
  onUpdateChatRoomUser: ChatRoomUser @aws_subscribe(mutations: ["updateChatRoomUser"]) @aws_api_key @aws_iam
  onDeleteChatRoomUser: ChatRoomUser @aws_subscribe(mutations: ["deleteChatRoomUser"]) @aws_api_key @aws_iam
}

type ModelReactionConnection @aws_api_key @aws_iam {
  items: [Reaction]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelReactionFilterInput {
  id: ModelIDInput
  userID: ModelIDInput
  content: ModelStringInput
  messageID: ModelIDInput
  and: [ModelReactionFilterInput]
  or: [ModelReactionFilterInput]
  not: ModelReactionFilterInput
}

input ModelReactionConditionInput {
  userID: ModelIDInput
  content: ModelStringInput
  messageID: ModelIDInput
  and: [ModelReactionConditionInput]
  or: [ModelReactionConditionInput]
  not: ModelReactionConditionInput
}

input CreateReactionInput {
  id: ID
  userID: ID
  content: String
  messageID: ID
  _version: Int
}

input UpdateReactionInput {
  id: ID!
  userID: ID
  content: String
  messageID: ID
  _version: Int
}

input DeleteReactionInput {
  id: ID!
  _version: Int
}

type ModelMessageConnection @aws_api_key @aws_iam {
  items: [Message]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelMessageStatusInput {
  eq: MessageStatus
  ne: MessageStatus
}

input ModelMessageFilterInput {
  id: ModelIDInput
  content: ModelStringInput
  userID: ModelIDInput
  chatroomID: ModelIDInput
  image: ModelStringInput
  audio: ModelStringInput
  status: ModelMessageStatusInput
  replyToMessageID: ModelIDInput
  isSelected: ModelBooleanInput
  and: [ModelMessageFilterInput]
  or: [ModelMessageFilterInput]
  not: ModelMessageFilterInput
}

input ModelMessageConditionInput {
  content: ModelStringInput
  userID: ModelIDInput
  chatroomID: ModelIDInput
  image: ModelStringInput
  audio: ModelStringInput
  status: ModelMessageStatusInput
  replyToMessageID: ModelIDInput
  isSelected: ModelBooleanInput
  and: [ModelMessageConditionInput]
  or: [ModelMessageConditionInput]
  not: ModelMessageConditionInput
}

input CreateMessageInput {
  id: ID
  content: String
  userID: ID
  chatroomID: ID
  image: String
  audio: String
  status: MessageStatus
  replyToMessageID: ID
  isSelected: Boolean
  _version: Int
}

input UpdateMessageInput {
  id: ID!
  content: String
  userID: ID
  chatroomID: ID
  image: String
  audio: String
  status: MessageStatus
  replyToMessageID: ID
  isSelected: Boolean
  _version: Int
}

input DeleteMessageInput {
  id: ID!
  _version: Int
}

type ModelChatRoomConnection @aws_api_key @aws_iam {
  items: [ChatRoom]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelChatRoomFilterInput {
  id: ModelIDInput
  newMessages: ModelIntInput
  name: ModelStringInput
  imageUri: ModelStringInput
  and: [ModelChatRoomFilterInput]
  or: [ModelChatRoomFilterInput]
  not: ModelChatRoomFilterInput
  chatRoomLastMessageId: ModelIDInput
  chatRoomAdminId: ModelIDInput
}

input ModelChatRoomConditionInput {
  newMessages: ModelIntInput
  name: ModelStringInput
  imageUri: ModelStringInput
  and: [ModelChatRoomConditionInput]
  or: [ModelChatRoomConditionInput]
  not: ModelChatRoomConditionInput
  chatRoomLastMessageId: ModelIDInput
  chatRoomAdminId: ModelIDInput
}

input CreateChatRoomInput {
  id: ID
  newMessages: Int
  name: String
  imageUri: String
  _version: Int
  chatRoomLastMessageId: ID
  chatRoomAdminId: ID
}

input UpdateChatRoomInput {
  id: ID!
  newMessages: Int
  name: String
  imageUri: String
  _version: Int
  chatRoomLastMessageId: ID
  chatRoomAdminId: ID
}

input DeleteChatRoomInput {
  id: ID!
  _version: Int
}

type ModelUserConnection @aws_api_key @aws_iam {
  items: [User]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUserFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  imageUri: ModelStringInput
  status: ModelStringInput
  lastOnlineAt: ModelIntInput
  typingStatus: ModelStringInput
  followers: ModelIDInput
  following: ModelIDInput
  blockedUsers: ModelIDInput
  color: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input ModelUserConditionInput {
  name: ModelStringInput
  imageUri: ModelStringInput
  status: ModelStringInput
  lastOnlineAt: ModelIntInput
  typingStatus: ModelStringInput
  followers: ModelIDInput
  following: ModelIDInput
  blockedUsers: ModelIDInput
  color: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

input CreateUserInput {
  id: ID
  name: String!
  imageUri: String
  status: String
  lastOnlineAt: AWSTimestamp
  typingStatus: String
  followers: [ID]
  following: [ID]
  blockedUsers: [ID]
  color: String
  _version: Int
}

input UpdateUserInput {
  id: ID!
  name: String
  imageUri: String
  status: String
  lastOnlineAt: AWSTimestamp
  typingStatus: String
  followers: [ID]
  following: [ID]
  blockedUsers: [ID]
  color: String
  _version: Int
}

input DeleteUserInput {
  id: ID!
  _version: Int
}

type ModelChatRoomUserConnection @aws_iam @aws_api_key {
  items: [ChatRoomUser]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelChatRoomUserFilterInput {
  id: ModelIDInput
  chatRoomID: ModelIDInput
  userID: ModelIDInput
  and: [ModelChatRoomUserFilterInput]
  or: [ModelChatRoomUserFilterInput]
  not: ModelChatRoomUserFilterInput
}

input ModelChatRoomUserConditionInput {
  chatRoomID: ModelIDInput
  userID: ModelIDInput
  and: [ModelChatRoomUserConditionInput]
  or: [ModelChatRoomUserConditionInput]
  not: ModelChatRoomUserConditionInput
}

input CreateChatRoomUserInput {
  id: ID
  chatRoomID: ID!
  userID: ID!
  _version: Int
}

input UpdateChatRoomUserInput {
  id: ID!
  chatRoomID: ID
  userID: ID
  _version: Int
}

input DeleteChatRoomUserInput {
  id: ID!
  _version: Int
}

input ModelIDKeyConditionInput {
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  between: [ID]
  beginsWith: ID
}

